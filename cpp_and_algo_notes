[1] Quick Find
==============
Idea is to store them as sets and find if they are connected, not maintain the tree.  For e.g. if n 
integers are there from 0 - n, union(3, 4) will make 3 and 4 part of the same set, implementation wise,
we store 0 - n in an array, meaning each index (denotes an elem) is part of it's own set. When we do a 
union(3,4), we change index 3's content to index 4's content, also we search for the array to find any 
index's content that matches 3 to change it to 4. When Connected(3,4) gets called we return True.

Supported APIs are Create DS specifying the upper limit or size, Union(i, j), and Connected(i,j)

[2] Quick Merge
===============
Idea is similar to the above, and API support is also same, the difference is we maintain the tree 
format in the array by storing an elem's root as the content of an index. For e.g. if 0-> 5 -> 2 -> 3, 
in the array [5, 1, 3, 4, 2, ...]. So union(i, j) operation is as simple as changing i's root nodes parent to j. Find is bit more time consuming as we need to check if i's and j's parents are the same.

Pvt functions are root(elem) which follows the elem list to return the root

[3] Quick Merge Improvement
===========================
An obvious improvement is to merge the smaller tree to bigger tree when union is called, thus depth of
the tree can be contained to log N to the base 2. 





Tips on C++
===========
Output buffer is cleared when 1. the buffer is full, 2. explicit buffer clear or 3. during input. For 
e.g. "cin >> s" will clear buffer.
Operators <<, +, >> are left associative, e.g. cout << s << t => (cout << s) << t. Now since << returns
ostream object, the << operator can act on ostream (cout) and t.
